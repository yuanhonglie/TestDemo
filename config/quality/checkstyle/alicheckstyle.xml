<?xml version="1.0"?>
<!--
  ~ Copyright 2015 Vincent Brison.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">


<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="error"/>
    <!--<property name="localeLanguage" value="en"/>-->
    <property name="fileExtensions" value="java"/>

    <module name="FileLength">
        <property name="max" value="2500"/>
        <property name="fileExtensions" value="java"/>
    </module>

    <module name="SuppressionFilter">
        <property name="file" value='${checkstyleSuppressionsPath}'/>
    </module>

    <module name="TreeWalker">
        <!--一、编程规约-->
        <!--(一)命名风格-->
        <!--1. 【强制】代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束-->
        <!--2. 【强制】代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式-->
        <!--3. 【强制】类名使用UpperCamelCase风格，但以下情形例外：DO / BO / DTO / VO / AO / PO等。-->
        <!--4. 【强制】方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase风格，必须遵从驼峰形式。-->
        <!-- 方法名 -->
        <module name="MethodName"/>
        <!-- 参数名 -->
        <module name="ParameterName"/>
        <!-- 局部final变量 -->
        <module name="LocalFinalVariableName"/>
        <!-- 成员变量 -->
        <module name="MemberName"/>
        <!-- 局部变量 -->
        <module name="LocalVariableName"/>

        <!--5. 【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。-->
        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
        </module>

        <!--6. 【强制】抽象类命名使用Abstract或Base开头；异常类命名使用Exception结尾；测试类命名以它要测试的类名开始，以Test结尾。-->
        <module name="AbstractClassName">
            <property name="format" value="^Abstract|Base.+$"/>
            <property name="ignoreModifier" value="true"/>
        </module>

        <!--7. 【强制】类型与中括号紧挨相连来定义数组-->
        <module name="ArrayTypeStyle"/>

        <!--8. 【强制】POJO类中布尔类型的变量，都不要加is前缀，否则部分框架解析会引起序列化错误。-->

        <!--9. 【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。-->
        <module name="PackageName">
            <property name="format" value="^[a-z][a-z]*(\.[a-z][a-z]*)*$"/>
        </module>

        <!--10. 【强制】杜绝完全不规范的缩写，避免望文不知义。-->
        <module name="AbbreviationAsWordInName">
            <property name="tokens" value="METHOD_DEF,PARAMETER_DEF,VARIABLE_DEF,CLASS_DEF"/>
            <property name="ignoreStatic" value="false"/>
            <property name="allowedAbbreviationLength" value="0"/>
            <property name="allowedAbbreviations" value="DO,BO,DTO,VO,AO,PO,DAO"/>
        </module>

        <!--11. 【推荐】为了达到代码自解释的目标，任何定义编程元素在命名时使用尽量完整单词组合来表达其意思-->
        <!--12. 【推荐】如果模块、接口、类、方法使用了设计模式，在命名时体现出具体模式。-->
        <!--13. 【推荐】接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的Javadoc注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。-->
        <!--14. 接口和实现类的命名有两套规则：-->
        <!--1）【强制】对于Service和DAO类，基于SOA的理念，暴露出来的服务一定是接口，内部的实现类用Impl的后缀与接口区别。-->
        <!--2） 【推荐】 如果是形容能力的接口名称，取对应的形容词为接口名（通常是–able的形式）。-->
        <!--15. 【参考】枚举类名建议带上Enum后缀，枚举成员名称需要全大写，单词间用下划线隔开。-->

        <!--（二）常量定义-->
        <!--1. 【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。-->
        <module name="MagicNumber">
            <property name="ignoreNumbers" value="-1, 0, 1, 2"/>
            <property name="constantWaiverParentToken" value="ASSIGN, ARRAY_INIT, EXPR,
                UNARY_PLUS, UNARY_MINUS, TYPECAST, ELIST, DIV, PLUS "/>
        </module>
        <!--2. 【强制】long或者Long初始赋值时，使用大写的L，不能是小写的l，小写容易跟数字1混淆，造成误解。-->
        <module name="UpperEll"/>
        <!--3. 【推荐】不要使用一个常量类维护所有常量，按常量功能进行归类，分开维护。-->
        <!--4. 【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。-->
        <!--1） 跨应用共享常量：放置在二方库中，通常是client.jar中的constant目录下。-->
        <!--2） 应用内共享常量：放置在一方库中，通常是子模块中的constant目录下。-->
        <!--3） 子工程内部共享常量：即在当前子工程的constant目录下。-->
        <!--4） 包内共享常量：即在当前包下单独的constant目录下。-->
        <!--5） 类内共享常量：直接在类内部private static final定义。-->
        <!--5. 【推荐】如果变量值仅在一个固定范围内变化用enum类型来定义。-->

        <!--（三）代码格式-->
        <!--1. 【强制】大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则：-->
        <!--1） 左大括号前不换行。-->
        <!--2） 左大括号后换行。-->
        <!--3） 右大括号前换行。-->
        <!--4） 右大括号后还有else等代码则不换行；表示终止的右大括号后必须换行。-->
        <module name="LeftCurly"/>
        <module name="RightCurly"/>
        <module name="NeedBraces"/>

        <!--2. 【强制】 左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格。详见第5条下方正例提示。-->
        <module name="ParenPad"/>
        <!--3. 【强制】if/for/while/switch/do等保留字与括号之间都必须加空格。-->
        <!--4. 【强制】任何二目、三目运算符的左右两边都需要加一个空格。-->
        <module name="SingleSpaceSeparator"/>
        <!--类型强转括号不需要空格-->
        <module name="TypecastParenPad"/>
        <!--5. 【强制】采用4个空格缩进，禁止使用tab字符。-->
        <!--FileTabCharacter-->

        <!--6. 【强制】注释的双斜杠与注释之间有且仅有一个空格-->

        <!--7. 【强制】单行字符数限不超过 120 个，超出需要换行，换行时遵循如下原则：-->
        <module name="LineLength">
            <property name="ignorePattern" value="^$"/>
            <property name="max" value="120"/>
        </module>
        <!--1） 第二行相对一缩进 4个空格，从第三行开始，不再继续缩进，参考示例-->
        <!--<module name="Indentation"/>-->
        <!--2） 运算符与下文一起换行。-->
        <module name="OperatorWrap">
            <property name="option" value="nl"/>
            <property name="tokens" value="ASSIGN, BAND, BOR, BSR, BXOR, COLON, DIV,
                                           EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF,
                                           LOR, LT, MINUS, MOD, NOT_EQUAL,
                                           PLUS, QUESTION, SL, SR, STAR"/>
        </module>
        <!--3） 方法调用的点符号与下文一起换行。-->
        <module name="SeparatorWrap">
            <property name="option" value="nl"/>
            <property name="tokens" value="DOT"/>
        </module>
        <!--4） 方法调用时，多个参数，需要换行时，在逗号后进行。-->
        <!--5） 在括号前不要换行，见反例。-->
        <module name="SeparatorWrap">
            <property name="option" value="eol"/>
            <property name="tokens" value="COMMA, LPAREN"/>
        </module>

        <!--8. 【强制】方法参数在定义和传入时，多个参数逗号后边必须加空格。-->
        <module name="MethodParamPad"/>
        <!--9. 【强制】IDE的text file encoding设置为UTF-8; IDE中文件的换行符使用Unix格式，不要使用Windows格式。-->
        <!--10. 【推荐】没有必要增加若干空格来使某一行的字符与上一行对应位置的字符对齐。-->
        <!--11. 【推荐】不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。-->
        <!--（四）OOP规约-->
        <!--1. 【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。-->
        <!--2. 【强制】所有的覆写方法，必须加@Override注解。-->
        <!-- Android Studio会自动检查覆写方法未加@Override注解的错误 -->
        <!--3. 【强制】相同参数类型，相同业务含义，才可以使用Java的可变参数，避免使用Object。-->
        <!--4. 【强制】外部正在调用或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加@Deprecated注解，并清晰地说明采用的新接口或者新服务是什么。-->
        <!--5. 【强制】不能使用过时的类或方法。-->
        <!--6. 【强制】Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。-->
        <module name="EqualsAvoidNull"/>
        <module name="CovariantEquals"/>
        <!--7. 【强制】所有的相同类型的包装类对象之间值的比较，全部使用equals方法比较。-->
        <module name="StringLiteralEquality"/>
        <!--8. 关于基本数据类型与包装数据类型的使用标准如下：-->
        <!--1） 【强制】所有的POJO类属性必须使用包装数据类型。-->
        <!--2） 【强制】RPC方法的返回值和参数必须使用包装数据类型。-->
        <!--3） 【推荐】所有的局部变量使用基本数据类型。-->
        <!--9. 【强制】定义DO/DTO/VO等POJO类时，不要设定任何属性默认值。-->
        <!--10. 【强制】序列化类新增属性时，请不要修改serialVersionUID字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改serialVersionUID值。-->
        <!--11. 【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在init方法中。-->
        <!--12. 【强制】POJO类必须写toString方法。使用IDE中的工具：source> generate toString时，如果继承了另一个POJO类，注意在前面加一下super.toString。-->
        <!--13. 【推荐】使用索引访问用String的split方法得到的数组时，需做最后一个分隔符后有无内容的检查，否则会有抛IndexOutOfBoundsException的风险。-->
        <!--14. 【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，此条规则优先于第15条规则。-->
        <!--15. 【推荐】 类内方法定义的顺序依次是：公有方法或保护方法 > 私有方法 > getter/setter方法。-->
        <!--16. 【推荐】setter方法中，参数名称与类成员变量名称一致，this.成员名 = 参数名。在getter/setter方法中，不要增加业务逻辑，增加排查问题的难度。-->
        <!--17. 【推荐】循环体内，字符串的连接方式，使用StringBuilder的append方法进行扩展。-->
        <!--18. 【推荐】final可以声明类、成员变量、方法、以及本地变量，下列情况使用final关键字：-->
        <!--1） 不允许被继承的类，如：String类。-->
        <!--2） 不允许修改引用的域对象，如：POJO类的域变量。-->
        <!--3） 不允许被重写的方法，如：POJO类的setter方法。-->
        <!--4） 不允许运行过程中重新赋值的局部变量。-->
        <!--5） 避免上下文重复使用一个变量，使用final描述可以强制重新定义一个变量，方便更好地进行重构-->
        <!--19. 【推荐】慎用Object的clone方法来拷贝对象。-->
        <!--20. 【推荐】类成员与方法访问控制从严：-->
        <!--1） 如果不允许外部直接通过new来创建对象，那么构造方法必须是private。-->
        <!--2） 工具类不允许有public或default构造方法。-->
        <!--3） 类非static成员变量并且与子类共享，必须是protected。-->
        <!--4） 类非static成员变量并且仅在本类使用，必须是private。-->
        <!--5） 类static成员变量如果仅在本类使用，必须是private。-->
        <!--6） 若是static成员变量，必须考虑是否为final。-->
        <!--7） 类成员方法只供类内部调用，必须是private。-->
        <!--8） 类成员方法只对继承类公开，那么限制为protected。-->
        <!--（五）集合处理-->
        <!--1. 【强制】关于hashCode和equals的处理，遵循如下规则：-->
        <!--1） 只要重写equals，就必须重写hashCode。-->
        <!--2） 因为Set存储的是不重复的对象，依据hashCode和equals进行判断，所以Set存储的对象必须重写这两个方法。-->
        <!--3） 如果自定义对象作为Map的键，那么必须重写hashCode和equals。-->
        <module name="EqualsHashCode"/>
        <!--2. 【强制】 ArrayList的subList结果不可强转成ArrayList，否则会抛出ClassCastException异常，即java.util.RandomAccessSubList cannot be cast to java.util.ArrayList.-->
        <!--3. 【强制】在subList场景中，高度注意对原集合元素个数的修改，会导致子列表的遍历、增加、删除均会产生ConcurrentModificationException 异常。-->
        <!--4. 【强制】使用集合转数组的方法，必须使用集合的toArray(T[] array)，传入的是类型完全一样的数组，大小就是list.size()。-->
        <!--5. 【强制】使用工具类Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的add/remove/clear方法会抛出UnsupportedOperationException异常。-->
        <!--6. 【强制】泛型通配符<? extends T>来接收返回的数据，此写法的泛型集合不能使用add方法，而<? super T>不能使用get方法，作为接口调用赋值时易出错。-->
        <!--7. 【强制】不要在foreach循环里进行元素的remove/add操作。remove元素请使用Iterator方式，如果并发操作，需要对Iterator对象加锁。-->
        <!--8. 【强制】 在JDK7版本及以上，Comparator要满足如下三个条件，不然Arrays.sort，Collections.sort会报IllegalArgumentException异常。-->
        <!--1） x，y的比较结果和y，x的比较结果相反。-->
        <!--2） x>y，y>z，则x>z。-->
        <!--3） x=y，则x，z比较结果和y，z比较结果相同。-->
        <!--9. 【推荐】集合初始化时，指定集合初始值大小。-->
        <!--10. 【推荐】使用entrySet遍历Map类集合KV，而不是keySet方式进行遍历。-->
        <!--11. 【推荐】高度注意Map类集合K/V能不能存储null值的情况，如下表格：-->
        <!--12. 【参考】合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。-->
        <!--13. 【参考】利用Set元素唯一的特性，可以快速对一个集合进行去重操作，避免使用List的contains方法进行遍历、对比、去重操作。-->
        <!--(六) 并发处理-->
        <!--1. 【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。-->
        <!--2. 【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。-->
        <!--3. 【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。-->
        <!--4. 【强制】线程池不允许使用 Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，避免资源耗尽的风险-->
        <!--5. 【强制】SimpleDateFormat 是线程不安全的类，一般不要定义为static变量，如果定义为static，必须加锁，或者使用DateUtils工具类。-->
        <!--6. 【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。-->
        <!--7. 【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。-->
        <!--8. 【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用version作为更新依据。-->
        <!--9. 【强制】多线程并行处理定时任务时，Timer运行多个TimeTask时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用ScheduledExecutorService则没有这个问题。-->
        <!--10. 【推荐】使用CountDownLatch进行异步转同步操作，每个线程退出前必须调用countDown方法，线程执行代码注意catch异常，确保countDown方法被执行到，避免主线程无法执行至await方法，直到超时才返回结果。-->
        <!--11. 【推荐】避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降。-->
        <!--12. 【推荐】在并发场景下，通过双重检查锁（double-checked locking）实现延迟初始化的优化问题隐患(可参考 The "Double-Checked Locking is Broken" Declaration)，推荐解决方案中较为简单一种（适用于JDK5及以上版本），将目标属性声明为 volatile型。-->
        <!--13. 【参考】volatile解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。-->
        <!--14. 【参考】 HashMap在容量不够进行resize时由于高并发可能出现死链，导致CPU飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险。-->
        <!--15. 【参考】ThreadLocal无法解决共享对象的更新问题，ThreadLocal对象建议使用static修饰。这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量 ，也就是说在类第一次被使用时装载，只分配一块存储空间，所有此类的对象(只要是这个线程内定义的)都可以操控这个变量。-->
        <!--(七) 控制语句-->
        <!--1. 【强制】在一个switch块内，每个case要么通过break/return等来终止，要么注释说明程序将继续执行到哪一个case为止；在一个switch块内，都必须包含一个default语句并且放在最后，即使空代码。-->
        <module name="DefaultComesLast"/>
        <!--2. 【强制】在if/else/for/while/do语句中必须使用大括号。即使只有一行代码，避免采用单行的编码方式：if (condition) statements;-->
        <module name="EmptyStatement"/>
        <!--3. 【强制】在高并发场景中，避免使用 ”等于 ”判断作为中或退出的条件。 -->
        <!--4. 【推荐】表达异常的分支时，少用if-else方式-->
        <!--5. 【推荐】除常用方法（如getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。-->
        <!--6. 【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的try-catch操作（这个try-catch是否可以移至循环体外）。-->
        <!--7. 【推荐】避免采用取反逻辑运算符-->
        <!--8. 【推荐】接口入参保护，这种场景常见的是用作批量操作的接口。-->
        <!--9. 【参考】下列情形，需要进行参数校验：-->
        <!--1） 调用频次低的方法。-->
        <!--2） 执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。-->
        <!--3） 需要极高稳定性和可用性的方法。-->
        <!--4） 对外提供的开放接口，不管是RPC/API/HTTP接口。-->
        <!--5） 敏感权限入口。-->
        <!--10. 【参考】下列情形，不需要进行参数校验：-->
        <!--1） 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。-->
        <!--2） 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般DAO层与Service层都在同一个应用中，部署在同一台服务器中，所以DAO的参数校验，可以省略。-->
        <!--3） 被声明成private只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。-->
        <!--(八) 注释规约-->
        <!--1. 【强制】类、类属性、类方法的注释必须使用Javadoc规范，使用/**内容*/格式，不得使用// xxx方式。-->
        <module name="CommentsIndentation"/>
        <!--2. 【强制】所有的抽象方法（包括接口中的方法）必须要用Javadoc注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。-->
        <!--3. 【强制】所有的类都必须添加创建者和创建日期。-->
        <module name="WriteTag">
            <property name="tag" value="@author"/>
            <property name="tagFormat" value="\S"/>
            <property name="tagSeverity" value="ignore"/>
            <property name="severity" value="warning"/>
        </module>
        <module name="WriteTag">
            <property name="tag" value="@date"/>
            <property name="tagFormat" value="\S"/>
            <property name="tagSeverity" value="ignore"/>
            <property name="severity" value="warning"/>
        </module>
        <!--4. 【强制】方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释，注意与代码对齐。-->
        <module name="TrailingComment"/>
        <!--5. 【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。-->
        <!--6. 【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。-->
        <!--7. 【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。-->
        <!--8. 【参考】谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。-->
        <!--9. 【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。-->
        <!--10. 【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。-->
        <!--11. 【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。-->
        <!--1） 待办事宜（TODO）:（ 标记人，标记时间，[预计处理时间]）-->
        <!--2） 错误，不能工作（FIXME）:（标记人，标记时间，[预计处理时间]）-->
        <!--(九) 其它-->
        <!--1. 【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。-->
        <!--2. 【强制】velocity调用POJO类的属性时，建议直接使用属性名取值即可，模板引擎会自动按规范调用POJO的getXxx()，如果是boolean基本数据类型变量（boolean命名不需要加is前缀），会自动调用isXxx()方法。-->
        <!--3. 【强制】后台输送给页面的变量必须加$!{var}——中间的感叹号。-->
        <!--4. 【强制】注意 Math.random() 这个方法返回是double类型，注意取值的范围 0≤x<1（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将x放大10的若干倍然后取整，直接使用Random对象的nextInt或者nextLong方法。-->
        <!--5. 【强制】获取当前毫秒数System.currentTimeMillis(); 而不是new Date().getTime();-->
        <!--6. 【推荐】不要在视图模板中加入任何复杂的逻辑。-->
        <!--7. 【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。-->
        <!--8. 【推荐】及时清理不再使用的代码段或配置信息。-->

        <!--二、异常日志-->
        <!--(一) 异常处理-->
        <!--1. 【强制】Java 类库中定义的可以通过预检查方式规避的RuntimeException异常不应该通过catch 的方式来处理，比如：NullPointerException，IndexOutOfBoundsException等等。-->
        <!--2. 【强制】异常不要用来做流程控制，条件控制。-->
        <!--3. 【强制】catch时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的catch尽可能进行区分异常类型，再做对应的异常处理。-->
        <!--4. 【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。-->
        <!--5. 【强制】有try块放到了事务代码中，catch异常后，如果需要回滚事务，一定要注意手动回滚事务。-->
        <!--6. 【强制】finally块必须对资源对象、流对象进行关闭，有异常也要做try-catch。-->
        <!--7. 【强制】不要在 finally块中使用 return。-->
        <!--8. 【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。-->
        <!--9. 【推荐】方法的返回值可以为null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回null值。-->
        <!--10. 【推荐】防止NPE，是程序员的基本修养，注意NPE产生的场景：-->
        <!--1）返回类型为基本数据类型，return包装数据类型的对象时，自动拆箱有可能产生NPE。-->
        <!--2） 数据库的查询结果可能为null。-->
        <!--3） 集合里的元素即使isNotEmpty，取出的数据元素也可能为null。-->
        <!--4） 远程调用返回对象时，一律要求进行空指针判断，防止NPE。-->
        <!--5） 对于Session中获取的数据，建议NPE检查，避免空指针。-->
        <!--6） 级联调用obj.getA().getB().getC()；一连串调用，易产生NPE。-->
        <!--11. 【推荐】定义时区分unchecked / checked 异常，避免直接抛出new RuntimeException()，更不允许抛出Exception或者Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DAOException / ServiceException等。-->
        <!--12. 【参考】对于公司外的http/api开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间RPC调用优先考虑使用Result方式，封装isSuccess()方法、“错误码”、“错误简短信息”。-->
        <!--13. 【参考】避免出现重复的代码（Don’t Repeat Yourself），即DRY原则。-->

        <module name="ExplicitInitialization"/>

    </module>

    <!--5. 【强制】采用4个空格缩进，禁止使用tab字符。-->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>
</module>
